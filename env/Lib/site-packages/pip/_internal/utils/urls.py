import os
<<<<<<< HEAD
import string
=======
import sys
>>>>>>> 09f5b77 (Add database support with Flask-SQLAlchemy)
import urllib.parse
import urllib.request
from typing import Optional

<<<<<<< HEAD
from .compat import WINDOWS


def get_url_scheme(url: str) -> Optional[str]:
=======

def get_url_scheme(url):
    # type: (str) -> Optional[str]
>>>>>>> 09f5b77 (Add database support with Flask-SQLAlchemy)
    if ":" not in url:
        return None
    return url.split(":", 1)[0].lower()


<<<<<<< HEAD
def path_to_url(path: str) -> str:
=======
def path_to_url(path):
    # type: (str) -> str
>>>>>>> 09f5b77 (Add database support with Flask-SQLAlchemy)
    """
    Convert a path to a file: URL.  The path will be made absolute and have
    quoted path parts.
    """
    path = os.path.normpath(os.path.abspath(path))
    url = urllib.parse.urljoin("file:", urllib.request.pathname2url(path))
    return url


<<<<<<< HEAD
def url_to_path(url: str) -> str:
=======
def url_to_path(url):
    # type: (str) -> str
>>>>>>> 09f5b77 (Add database support with Flask-SQLAlchemy)
    """
    Convert a file: URL to a path.
    """
    assert url.startswith(
        "file:"
    ), f"You can only turn file: urls into filenames (not {url!r})"

    _, netloc, path, _, _ = urllib.parse.urlsplit(url)

    if not netloc or netloc == "localhost":
        # According to RFC 8089, same as empty authority.
        netloc = ""
<<<<<<< HEAD
    elif WINDOWS:
=======
    elif sys.platform == "win32":
>>>>>>> 09f5b77 (Add database support with Flask-SQLAlchemy)
        # If we have a UNC path, prepend UNC share notation.
        netloc = "\\\\" + netloc
    else:
        raise ValueError(
            f"non-local file URIs are not supported on this platform: {url!r}"
        )

    path = urllib.request.url2pathname(netloc + path)
<<<<<<< HEAD

    # On Windows, urlsplit parses the path as something like "/C:/Users/foo".
    # This creates issues for path-related functions like io.open(), so we try
    # to detect and strip the leading slash.
    if (
        WINDOWS
        and not netloc  # Not UNC.
        and len(path) >= 3
        and path[0] == "/"  # Leading slash to strip.
        and path[1] in string.ascii_letters  # Drive letter.
        and path[2:4] in (":", ":/")  # Colon + end of string, or colon + absolute path.
    ):
        path = path[1:]

=======
>>>>>>> 09f5b77 (Add database support with Flask-SQLAlchemy)
    return path
